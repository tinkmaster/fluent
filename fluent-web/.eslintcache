[{"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/index.js":"1","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/interfaces/Constant.js":"2","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/PipelineService.js":"3","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/ExecutionService.js":"4","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/reducer/RootReducer.js":"5","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/reportWebVitals.js":"6","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/App.js":"7","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/fetch/Fetch.js":"8","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/pipelines/PipelineDetails.js":"9","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPage.js":"10","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/ExecutionGraph.js":"11","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/PipelineGraph.js":"12","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/DataFlowNodeTypes.js":"13","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/operators/OperatorList.js":"14","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/pipelines/PipelineList.js":"15","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionHistoryList.js":"16","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionNodeInfo.js":"17","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionHistoryOverview.js":"18","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPageReducer.js":"19","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/OperatorService.js":"20","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/operators/OperatorDetails.js":"21","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/DataFlowEdgeType.js":"22","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPageReduxContainer.js":"23","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/GraphService.js":"24"},{"size":981,"mtime":1606741552419,"results":"25","hashOfConfig":"26"},{"size":1063,"mtime":1607235265251,"results":"27","hashOfConfig":"26"},{"size":2878,"mtime":1607243839494,"results":"28","hashOfConfig":"26"},{"size":1675,"mtime":1607241884785,"results":"29","hashOfConfig":"26"},{"size":213,"mtime":1606944621829,"results":"30","hashOfConfig":"26"},{"size":362,"mtime":1606661387031,"results":"31","hashOfConfig":"26"},{"size":1132,"mtime":1606921919155,"results":"32","hashOfConfig":"26"},{"size":2087,"mtime":1607241732737,"results":"33","hashOfConfig":"26"},{"size":2179,"mtime":1606909187667,"results":"34","hashOfConfig":"26"},{"size":8652,"mtime":1610544199294,"results":"35","hashOfConfig":"26"},{"size":2306,"mtime":1607243063883,"results":"36","hashOfConfig":"26"},{"size":3625,"mtime":1607243939716,"results":"37","hashOfConfig":"26"},{"size":3806,"mtime":1607243015917,"results":"38","hashOfConfig":"26"},{"size":2669,"mtime":1606944291346,"results":"39","hashOfConfig":"26"},{"size":1747,"mtime":1606941683900,"results":"40","hashOfConfig":"26"},{"size":4927,"mtime":1606936671992,"results":"41","hashOfConfig":"26"},{"size":10438,"mtime":1610542445625,"results":"42","hashOfConfig":"26"},{"size":1086,"mtime":1606934514752,"results":"43","hashOfConfig":"26"},{"size":4405,"mtime":1607243144127,"results":"44","hashOfConfig":"26"},{"size":2294,"mtime":1607232101463,"results":"45","hashOfConfig":"26"},{"size":10168,"mtime":1610569880262,"results":"46","hashOfConfig":"26"},{"size":1282,"mtime":1606941508033,"results":"47","hashOfConfig":"26"},{"size":2986,"mtime":1606944711176,"results":"48","hashOfConfig":"26"},{"size":3679,"mtime":1610542139841,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1j81gnz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/index.js",[],["113","114"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/interfaces/Constant.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/PipelineService.js",["115"],"import {deleteRequest, errorHandler, get, post} from \"../fetch/Fetch\";\nimport {\n    DELETE_PIPELINE_ADDRESS,\n    GET_PIPELINE_ADDRESS,\n    LIST_PIPELINE_ADDRESS,\n    POST_PIPELINE_ADDRESS\n} from \"../interfaces/Constant\";\nimport {message} from 'antd';\nimport {listExecutionDiagram} from \"./ExecutionService\";\nimport {\n    editPipelineAction,\n    freshPipelineListAction,\n    updatePipelineGraph\n} from \"../pages/pipelines/PipelinesPageReducer\";\nimport React from \"react\";\nimport {drawPipelineGraph} from \"./GraphService\";\n\nexport function listPipelines() {\n    return dispatch => {\n        get(LIST_PIPELINE_ADDRESS).then(response => {\n                if (response.data.code === 200) {\n                    dispatch(freshPipelineListAction(response.data.data))\n                }\n            }\n        )\n    }\n}\n\nexport function selectPipeline(name) {\n    return dispatch => {\n        get(GET_PIPELINE_ADDRESS.replace(\"{}\", name)).then(\n            response => {\n                if (response.data.code === 200) {\n                    dispatch(editPipelineAction(response.data.data));\n\n                    if (response.data.data && response.data.data.operators) {\n                        const res = drawPipelineGraph(response.data.data)\n                        dispatch(updatePipelineGraph(res))\n                    } else {\n                        dispatch(updatePipelineGraph([]))\n                    }\n\n                }\n            }\n        ).then(\n            () => {\n                dispatch(listExecutionDiagram(name));\n            }\n        )\n    }\n}\n\nexport function postPipeline(value) {\n    return dispatch => {\n        post(POST_PIPELINE_ADDRESS, value).then(\n            response => {\n                if (response.data.code === 200) {\n                    dispatch(listPipelines())\n                    message.success('Save pipeline successfully.');\n                }\n            }\n        ).catch(error => errorHandler(error))\n    }\n}\n\nexport function updatePipeline(name, values) {\n    return dispatch => {\n        post(POST_PIPELINE_ADDRESS, values).then(\n            response => {\n                if (response.data.code === 200) {\n                    message.success(\"Update pipeline successfully.\")\n                }\n            }\n        ).catch(error => errorHandler(error))\n    }\n}\n\nexport function deletePipeline(name) {\n    return dispatch => {\n        deleteRequest(DELETE_PIPELINE_ADDRESS.replace(\"{}\", name)).then(\n            response => {\n                if (response.data.code === 200) {\n                    message.success('Delete successfully');\n                    get(LIST_PIPELINE_ADDRESS).then(response => {\n                        if (response.data.code === 200) {\n                            dispatch(freshPipelineListAction(response.data.data))\n                        }\n                    })\n                }\n            }\n        )\n    }\n}\n",["116","117"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/ExecutionService.js",[],["118","119"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/reducer/RootReducer.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/reportWebVitals.js",[],["120","121"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/App.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/fetch/Fetch.js",["122","123"],"import axios from 'axios'\nimport {notification} from \"antd\";\nimport CloseCircleOutlined from \"@ant-design/icons/lib/icons/CloseCircleOutlined\";\nimport React from \"react\";\n\n\nlet config = {\n    // baseURL: '',\n    // transformRequest: [\n    //     // function (data) {\n    //     //     let ret = '';\n    //     //     for (let it in data) {\n    //     //         ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n    //     //     }\n    //     //     return ret\n    //     // }\n    // ],\n    // transformResponse: [\n    //     function (data) {\n    //         return data\n    //     }\n    // ],\n    headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n    },\n    timeout: 10000,\n    responseType: 'json',\n    withCredentials: true\n};\n\nfunction getCookie(c_name) {\n    if (document.cookie.length > 0) {\n        let c_start = document.cookie.indexOf(c_name + \"=\")\n        if (c_start != -1) {\n            c_start = c_start + c_name.length + 1\n            let c_end = document.cookie.indexOf(\";\", c_start)\n            if (c_end == -1) c_end = document.cookie.length\n            return unescape(document.cookie.substring(c_start, c_end))\n        }\n    }\n    return \"\"\n}\n\naxios.interceptors.request.use(function (res) {\n    let index = document.cookie.indexOf('x-token=');\n    if (index !== -1) {\n        if (getCookie('x-token').indexOf('.xx.') === -1) {\n            res.headers['x-token'] = getCookie('x-token');\n        }\n    }\n    res.headers['Content-Type'] = 'application/json;charset=UTF-8'\n    return res;\n});\n\nexport function errorHandler(error) {\n    if (Object.keys(error).length !== 0) {\n        notification.error({\n            message: 'Failed',\n            description: error.response.data.message,\n            icon: <CloseCircleOutlined style={{color: 'red'}}/>,\n        });\n    }\n}\n\nexport function get(url, resHandler) {\n    return axios.get(url, config)\n}\n\nexport function post(url, data, resHandler) {\n    return axios.post(url, data, config)\n}\n\nexport function deleteRequest(url, resHandler) {\n    return axios.delete(url, config)\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/pipelines/PipelineDetails.js",["124","125"],"import React, {Component} from 'react';\nimport {Button, Form, Input, Modal, Select} from \"antd\";\nconst tailLayout = {\n    wrapperCol: {offset: 16, span: 16},\n};\n\nconst layout = {\n    labelCol: {span: 6},\n    wrapperCol: {span: 17},\n};\nconst onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n};\n\nexport class PipelineDetails extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    onFinish = (values) => {\n        // reorganize the data\n        this.props.postPipeline(values);\n        this.props.updateState('pipelineDetailsVisible', false, \"selectedPipeline\", null)\n    }\n\n    onCancel = () => {\n        this.props.updateState('pipelineDetailsVisible', false, \"selectedPipeline\", null)\n    }\n\n    render() {\n        return (\n            <Modal\n                title=\"PipelineDetails\"\n                visible={this.props.visible}\n                footer={null}\n                onCancel={this.onCancel}\n                destroyOnClose={true}\n            >\n                <Form\n                    preserve={false}\n                    {...layout}\n                    name=\"basic\"\n                    onFinish={this.onFinish}\n                    onFinishFailed={onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"Pipeline Name\"\n                        name=\"name\"\n                        rules={[{required: true, message: 'Please input your pipeline name!'}]}\n                        initialValue={this.props.selectedOperator ? this.props.selectedOperator.name : null}\n                    >\n                        <Input/>\n                    </Form.Item>\n                    <Form.Item {...tailLayout}>\n                        <div>\n                            <Button style={{\"marginRight\": 8}}\n                                    onClick={this.onCancel}>Cancel\n                            </Button>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Save\n                            </Button>\n                        </div>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        );\n    }\n}\n",["126","127"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPage.js",["128"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/ExecutionGraph.js",["129"],"import React from \"react\";\nimport {edgeTypes} from \"./DataFlowEdgeType\";\nimport {nodeTypes} from \"./DataFlowNodeTypes\";\nimport ReactFlow, {Controls, MiniMap} from \"react-flow-renderer\";\n\n\nexport class ExecutionGraph extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        return (\n            <ReactFlow\n                elements={this.props.executionData}\n                nodesConnectable={false}\n                nodeTypes={nodeTypes}\n                edgeTypes={edgeTypes}\n                onElementClick={(event, element) =>\n                    this.props.updatePipelinePageState(\"selectedHistoryNode\", element.id)}\n            >\n                <MiniMap\n                    nodeColor={(node) => {\n                        switch (node.type) {\n                            case 'input':\n                                return 'red';\n                            case 'default':\n                                return '#00ff00';\n                            case 'output':\n                                return 'rgb(0,0,255)';\n                            default:\n                                return '#eee';\n                        }\n                    }}\n                />\n                {/*<div*/}\n                {/*    style={{*/}\n                {/*        position: 'absolute',*/}\n                {/*        left: 32,*/}\n                {/*        top: 32,*/}\n                {/*        zIndex: 4,*/}\n                {/*        textTransform: 'none'*/}\n                {/*    }}>*/}\n                {/*    <Row>*/}\n\n                {/*        <Col>*/}\n                {/*            <Button type=\"primary\" shape=\"round\" onClick={this.props.saveDiagram}>Save*/}\n                {/*                Diagram</Button>*/}\n                {/*        </Col>*/}\n                {/*        <Col>*/}\n                {/*            <Button type=\"primary\" shape=\"round\" danger style={{marginLeft: 26}}*/}\n                {/*                    onClick={this.props.runDiagram}>*/}\n                {/*                Run Pipeline*/}\n                {/*            </Button>*/}\n                {/*        </Col>*/}\n                {/*    </Row>*/}\n                {/*</div>*/}\n                <Controls/>\n            </ReactFlow>\n        )\n    }\n}\n",["130","131"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/PipelineGraph.js",["132","133","134"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/DataFlowNodeTypes.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/operators/OperatorList.js",["135"],"import React, {Component} from 'react';\nimport {Button, List, Popconfirm} from \"antd\";\nimport {DeleteOutlined, EditOutlined, PlusCircleOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport './css/OperatorList.css'\n\nexport class OperatorList extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        // this.props = {\n        //     operators: [],\n        //     updatePipelinePageState: PropTypes.function,\n        //     addOperatorToGraph: PropTypes.function,\n        //     deleteOperator: PropTypes.function\n        // }\n    }\n\n\n    render() {\n        return (\n            <div className=\"operator-list\">\n                <List\n                    header={<div className=\"operator-list-title\">\n                        <span>Operator list</span>\n                        <Button\n                            onClick={() => this.props.updatePipelinePageState('selectedOperator', null, 'operatorDetailsVisible', true\n                            )}\n                            style={{'marginLeft': 'auto', 'marginRight': '18px'}}><PlusOutlined/></Button>\n                    </div>}\n                    dataSource={this.props.operators}\n                    renderItem={item => (\n                        <List.Item className=\"operator-list-item\">\n                            <span style={{'width': 'fit-content'}}>{item}</span>\n                            <PlusCircleOutlined className=\"operator-list-item-icon\"\n                                                style={{'marginLeft': 'auto'}}\n                                                onClick={() => this.props.addOperatorToPipelineGraph(item)}/>\n                            <EditOutlined className=\"operator-list-item-icon\" style={{'paddingLeft': 18,}}\n                                          onClick={(e) => {\n                                              this.props.editOperator(e, item)\n                                          }}/>\n                            <Popconfirm\n                                placement=\"bottomRight\"\n                                title={'Are you sure to delete this operator?'}\n                                onConfirm={() => this.props.deleteOperator(item)}\n                                okText=\"Yes\"\n                                cancelText=\"No\"\n                                style={{backgroundColor: 'white', color: 'white'}}\n                            >\n                                <DeleteOutlined className=\"operator-list-item-icon\" style={{'paddingLeft': 18,}}/>\n                            </Popconfirm>\n\n                        </List.Item>\n                    )}\n                />\n            </div>\n        )\n    }\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/pipelines/PipelineList.js",["136"],"import React, {Component} from \"react\";\nimport {Button, List} from \"antd\";\nimport './css/PipelineList.css'\nimport {PlusOutlined} from \"@ant-design/icons\";\n\nexport class PipelineList extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        // this.props = {\n        //     pipelines: [],\n        //     selectedPipeline: {},\n        //     selectPipeline: PropTypes.function,\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"pipeline-list\">\n                <List\n                    header={\n                        <div className=\"pipeline-list-title\">\n                            <span>Pipeline list</span>\n                            <Button\n                                onClick={() => this.props.updatePipelinePageState('pipelineDetailsVisible', true)}\n                                style={{'marginLeft': 'auto', 'marginRight': '18px'}}><PlusOutlined/></Button>\n                        </div>}\n                    dataSource={this.props.pipelines}\n                    renderItem={item => (\n                        <List.Item\n                            className=\"pipeline-list-item\"\n                            onClick={() => this.props.selectPipeline(item)}\n                            style={{\n                                backgroundColor: this.props.selectedPipeline ?\n                                    this.props.selectedPipeline.name === item ? \"#e1e1e1\" : null\n                                    : null\n                            }}\n                        >\n                            <span style={{'width': 'fit-content'}}>{item}</span>\n                        </List.Item>\n                    )}\n                />\n            </div>\n        )\n    }\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionHistoryList.js",["137"],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionNodeInfo.js",["138","139","140"],"import React from 'react';\nimport {Card, Descriptions, Empty, Popover, Table} from \"antd\";\nimport {ReadOutlined, CheckOutlined, CloseOutlined} from \"@ant-design/icons/lib/icons\";\nimport './css/ExecutionNodeInfo.css'\n\nconst dataValidationColoums = [\n    {\n      title: 'Variable',\n      dataIndex: 'variable',\n      key: 'variable',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      render: status => {\n        return status === \"true\" ? <CheckOutlined style={{color: 'green'}}/>: <CloseOutlined style={{color: 'red'}}/>;\n      }\n    },\n    {\n      title: 'Result',\n      dataIndex: 'result',\n      key: 'result',\n    }\n]\n\nexport class ExecutionNodeInfo extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        let nodeResult;\n        let dataValidationData = [];\n        if (this.props.diagram.results[this.props.node.id]) {\n            nodeResult = JSON.parse(this.props.diagram.results[this.props.node.id]);\n            if (this.props.node.operator.type === 'DATA_VALIDATION') {\n                if (this.props.node.status === 'FINISHED') {\n                    Object.keys(nodeResult).map(variable => {\n                        dataValidationData = dataValidationData.concat(\n                            {\n                                variable: variable,\n                                status: nodeResult[variable]['result'],\n                                result: nodeResult[variable]['message']\n                            }\n                        )\n                    })\n                } else if(nodeResult['data']){\n                    Object.keys(nodeResult['data']).map(variable => {\n                        dataValidationData = dataValidationData.concat(\n                            {\n                                variable: variable,\n                                status: nodeResult['data'][variable]['result'],\n                                result: nodeResult['data'][variable]['message']\n                            }\n                        )\n                    })\n                }\n            }\n            console.log(dataValidationData)\n        }\n        return (\n            <div className={'execution-node-info'}>\n                <Card\n                    title={<span className=\"execution-node-info-card-title\">Execution Node Info</span>}>\n                    <Descriptions>\n                        <Descriptions.Item label=\"Operator Name\">{this.props.node.operator.name}</Descriptions.Item>\n                        <Descriptions.Item label=\"Operator Type\">{this.props.node.operator.type}</Descriptions.Item>\n                        <Descriptions.Item\n                            label=\"Used time (ms)\">{this.props.node.usedTime ? this.props.node.usedTime : 'Unknown'}</Descriptions.Item>\n                        <Descriptions.Item label=\"Status\" span={3}>{this.props.node.status}</Descriptions.Item>\n                    </Descriptions>\n                    {\n                        this.props.node.status === 'FAILED' ?\n                            <Descriptions title={'Error Info'}>\n                                <Descriptions.Item\n                                    label=\"Reason\"><span\n                                    style={{fontWeight: 'bold'}}>{nodeResult.error}</span></Descriptions.Item>\n                            </Descriptions> : ''\n                    }\n                    {\n                        this.props.node.operator.type === 'HTTP_REQUEST' ?\n                            <div>\n                                {this.props.node.status === 'FINISHED' ?\n                                    <Descriptions title={'Http Response'}>\n                                        <Descriptions.Item\n                                            label=\"Response Code\">{nodeResult.status.code}</Descriptions.Item>\n                                        <Descriptions.Item\n                                            label=\"Response Headers\"><Popover content={\n                                            <pre>{nodeResult.headers && Object.keys(nodeResult.headers).length !== 0 ?\n                                                this.objectToString(nodeResult.headers) : <Empty/>}</pre>}\n                                                                              trigger=\"hover\">\n                                            <ReadOutlined style={{marginTop: 'auto', marginBottom: 'auto'}}/>\n                                        </Popover></Descriptions.Item>\n                                        <Descriptions.Item\n                                            label=\"Response Body\"><Popover style={{\n                                            backgroundColor: '#b36666'\n                                        }} content={\n                                            <pre>{nodeResult.headers && Object.keys(nodeResult.headers).length !== 0 ?\n                                                this.formatJson(nodeResult.body) : <Empty/>}</pre>}\n                                                                           trigger=\"hover\">\n                                            <ReadOutlined style={{marginTop: 'auto', marginBottom: 'auto'}}/>\n                                        </Popover></Descriptions.Item>\n                                    </Descriptions> : ''}\n                                <Descriptions title={'Http Request'}>\n                                    <Descriptions.Item\n                                        label=\"Http HOST\">{this.props.node.operator.params.uri}</Descriptions.Item>\n                                    <Descriptions.Item\n                                        label=\"Http Path\">{this.props.node.operator.params.path}</Descriptions.Item>\n                                    <Descriptions.Item\n                                        label=\"Http Method\">{this.props.node.operator.params.method}</Descriptions.Item>\n                                    <Descriptions.Item\n                                        label=\"Http Headers\">\n                                        <Popover content={\n                                            <pre>{this.props.node.operator.params.headers\n                                            && this.props.node.operator.params.headers.trim().length !== 0 ?\n                                                this.props.node.operator.params.headers : <Empty/>}</pre>}\n                                                 trigger=\"hover\">\n                                            <ReadOutlined style={{marginTop: 'auto', marginBottom: 'auto'}}/>\n                                        </Popover>\n                                    </Descriptions.Item>\n                                    <Descriptions.Item\n                                        label=\"Http Request Body\">\n                                        <Popover content={\n                                            <pre>{this.props.node.operator.params.body\n                                            && this.props.node.operator.params.body.trim().length !== 0 ?\n                                                this.props.node.operator.params.body : <Empty/>}</pre>}\n                                                 trigger=\"hover\">\n                                            <ReadOutlined style={{marginTop: 'auto', marginBottom: 'auto'}}/>\n                                        </Popover>\n                                        {}\n                                    </Descriptions.Item>\n                                </Descriptions>\n                            </div>\n                            : ''}\n                    {\n                        this.props.node.operator.type === 'DATA_VALIDATION' ?\n                            <Table columns={dataValidationColoums} dataSource={dataValidationData} />\n                            : ''}\n                </Card>\n            </div>\n        )\n    }\n\n\n    objectToString(obj) {\n        let str = ''\n        const keys = Object.keys(obj)\n        for (let i = 0; i < keys.length; i++) {\n            if (i !== 0) {\n                str = str + '\\n'\n            }\n            str = str + keys[i] + ': ' + obj[keys[i]]\n        }\n        return str;\n    }\n\n    formatJson(json) {\n        var i = 0,\n            len = 0,\n            tab = \"    \",\n            targetJson = \"\",\n            indentLevel = 0,\n            inString = false,\n            currentChar = null;\n\n\n        for (i = 0, len = json.length; i < len; i += 1) {\n            currentChar = json.charAt(i);\n\n            switch (currentChar) {\n                case '{':\n                case '[':\n                    if (!inString) {\n                        targetJson += currentChar + \"\\n\" + this.repeat(tab, indentLevel + 1);\n                        indentLevel += 1;\n                    } else {\n                        targetJson += currentChar;\n                    }\n                    break;\n                case '}':\n                case ']':\n                    if (!inString) {\n                        indentLevel -= 1;\n                        targetJson += \"\\n\" + this.repeat(tab, indentLevel) + currentChar;\n                    } else {\n                        targetJson += currentChar;\n                    }\n                    break;\n                case ',':\n                    if (!inString) {\n                        targetJson += \",\\n\" + this.repeat(tab, indentLevel);\n                    } else {\n                        targetJson += currentChar;\n                    }\n                    break;\n                case ':':\n                    if (!inString) {\n                        targetJson += \": \";\n                    } else {\n                        targetJson += currentChar;\n                    }\n                    break;\n                case ' ':\n                case \"\\n\":\n                case \"\\t\":\n                    if (inString) {\n                        targetJson += currentChar;\n                    }\n                    break;\n                case '\"':\n                    if (i > 0 && json.charAt(i - 1) !== '\\\\') {\n                        inString = !inString;\n                    }\n                    targetJson += currentChar;\n                    break;\n                default:\n                    targetJson += currentChar;\n                    break;\n            }\n        }\n        return targetJson;\n    }\n\n    repeat(s, count) {\n        return new Array(count + 1).join(s);\n    }\n\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/executions/ExecutionHistoryOverview.js",["141"],"import React, {Component} from \"react\";\nimport {Card, Col, Row, Statistic} from 'antd';\nimport './css/ExecutionHistoryOverview.css'\n\nexport class ExecutionHistoryOverview extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        return (\n            <div className=\"execution-overview\">\n                <Card\n                    style={{height: '100%'}}\n                    title={<span className=\"execution-overview-card-title\">Execution Overview</span>}>\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Statistic title=\"Build Times\" value={112893}/>\n                        </Col>\n                        <Col span={8}>\n                            <Statistic title=\"Latest Build\" value={112893}/>\n                        </Col>\n                        <Col>\n                            <Statistic title=\"Last Failed\" value={112893} precision={2}/>\n                        </Col>\n                    </Row>\n                </Card>\n            </div>\n        )\n    }\n\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPageReducer.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/OperatorService.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/operators/OperatorDetails.js",["142","143","144","145","146"],"import React, { Component } from 'react';\nimport { Button, Form, Input, Modal, Row, Col, Select, Space } from \"antd\";\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\";\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\";\n\nconst tailLayout = {\n    wrapperCol: { offset: 16, span: 16 },\n};\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 17 },\n};\n\n\nconst onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n};\n\nexport class OperatorDetails extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isHttpType: this.props.selectedOperator ? 'HTTP_REQUEST' === this.props.selectedOperator.type : false,\n            isDataValidationType: this.props.selectedOperator ?\n                'DATA_VALIDATION' === this.props.selectedOperator.type : false\n        }\n    }\n\n    onFinish = (values) => {\n        // reorganize the data\n        let data = {}\n        data['name'] = values['name'].trim()\n        data['type'] = values['type'].trim()\n        data['params'] = {}\n        Object.keys(values).filter(k => k !== 'name' && k !== 'type' && k != 'conditions').map(k => {\n            if (values[k]) {\n                values[k] = values[k].trim()\n            }\n            data['params'][k] = values[k]\n        })\n        if(values['conditions']) {\n            values['conditions'].forEach(con => {\n                data['params'][con['variable'].trim()] = con['condition'].trim()\n            })\n        }\n        this.props.postOperator(Object.assign({}, data));\n        this.props.updateState('operatorDetailsVisible', false, \"selectedOperator\", null)\n    }\n\n    onCancel = () => {\n        this.setState({ isHttpType: false, isDataValidationType: false })\n        this.props.updateState('operatorDetailsVisible', false, \"selectedOperator\", null)\n    }\n\n\n    render() {\n        return (\n            <Modal\n                title=\"OperatorDetails\"\n                visible={this.props.visible}\n                footer={null}\n                onCancel={this.onCancel}\n                destroyOnClose={true}\n            >\n                <Form\n                    preserve={false}\n                    {...layout}\n                    name=\"basic\"\n                    onFinish={this.onFinish}\n                    onFinishFailed={onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"Operator Name\"\n                        name=\"name\"\n                        rules={[{ required: true, message: 'Please input your username!' }]}\n                        initialValue={this.props.selectedOperator ? this.props.selectedOperator.name : null}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Operator Type\"\n                        name=\"type\"\n                        rules={[{ required: true, message: 'Please select operator type!' }]}\n                        initialValue={this.props.selectedOperator ? this.props.selectedOperator.type : null}\n                    >\n                        <Select onChange={(value) => {\n                            this.setState({ isHttpType: 'HTTP_REQUEST' === value, isDataValidationType: 'DATA_VALIDATION' === value })\n                        }}>\n                            <Select.Option value=\"HTTP_REQUEST\">HTTP_REQUEST</Select.Option>\n                            <Select.Option value=\"DATA_VALIDATION\">DATA_VALIDATION</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    {(this.props.selectedOperator && 'HTTP_REQUEST' === this.props.selectedOperator.type) || this.state.isHttpType ?\n                        <HttpParameters\n                            params={this.props.selectedOperator ? this.props.selectedOperator.params : null} /> : ''}\n                    {(this.props.selectedOperator && 'DATA_VALIDATION' === this.props.selectedOperator.type) || this.state.isDataValidationType ?\n                        <DataValidation\n                            params={this.props.selectedOperator ? this.props.selectedOperator.params : null} /> : ''}\n                    <Form.Item {...tailLayout}>\n                        <div>\n                            <Button style={{ \"marginRight\": 8 }}\n                                onClick={this.onCancel}>Cancel\n                            </Button>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Save\n                            </Button>\n                        </div>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nclass HttpParameters extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        return (\n            <div>\n                <Form.Item\n                    label=\"HTTP URI\"\n                    name=\"uri\"\n                    rules={[{ required: true, message: 'Please enter url' }]}\n                    initialValue={this.props.params ? this.props.params.uri : null}\n                >\n                    <Input placeholder=\"https://google.com\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"HTTP Path\"\n                    name=\"path\"\n                    rules={[{ required: true, message: 'Please enter the path' }]}\n                    initialValue={this.props.params ? this.props.params.path : null}\n                >\n                    <Input placeholder=\"/api/v1/some\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"HTTP Method\"\n                    name=\"method\"\n                    rules={[{ required: true, message: 'Please select http method' }]}\n                    initialValue={this.props.params ? this.props.params.method : null}\n                >\n                    <Select>\n                        <Select.Option value=\"GET\">GET</Select.Option>\n                        <Select.Option value=\"POST\">POST</Select.Option>\n                        <Select.Option value=\"PUT\">PUT</Select.Option>\n                        <Select.Option value=\"DELETE\">DELETE</Select.Option>\n                        <Select.Option value=\"OPTION\">OPTION</Select.Option>\n                        <Select.Option value=\"TRACE\">TRACE</Select.Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    label=\"HTTP Headers\"\n                    name=\"headers\"\n                    initialValue={this.props.params ? this.props.params.headers : null}\n\n                >\n                    <Input.TextArea placeholder=\"key1: value1&#13;key2: value2\" autoSize={true} />\n                </Form.Item>\n                <Form.Item\n                    label=\"RequestBody\"\n                    name=\"body\"\n                    initialValue={this.props.params ? this.props.params.body : null}\n\n                >\n                    <Input.TextArea placeholder=\"{ key: value }\" autoSize={true} />\n                </Form.Item>\n            </div>\n        )\n    }\n}\n\nclass DataValidation extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        let dvInitialValue=[]\n        if (this.props.params) {\n            Object.keys(this.props.params).map(key => {\n                dvInitialValue = dvInitialValue.concat(\n                    {\n                        variable: key,\n                        condition: this.props.params[key]\n                    }\n                )\n            })\n        }\n        return (\n            <Form.List name=\"conditions\" initialValue={dvInitialValue}>\n                {(fields, { add, remove }) => (\n                    <div>\n                        <Row>\n                            <Col span={6}>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conditions:\n                            </Col>\n                            <Col span={18}>\n                                {fields.map(field => (\n                                    <Space key={field.key} direction=\"vertical\" align=\"baseline\" style={{display: \"block\"}}>\n                                        <Form.Item\n                                            label=\"variable\"\n                                            {...field}\n                                            name={[field.name, 'variable']}\n                                            fieldKey={[field.fieldKey, 'variable']}\n                                            rules={[{ required: true, message: 'Missing variable name' }]}\n                                            style={{marginBottom: 0}}\n                                        >\n                                            <Input placeholder=\"Variable name to be check\" />\n                                        </Form.Item>\n                                        <MinusCircleOutlined onClick={() => remove(field.name)} />\n                                        <Form.Item\n                                            label=\"expression\"\n                                            {...field}\n                                            name={[field.name, 'condition']}\n                                            fieldKey={[field.fieldKey, 'condition']}\n                                            rules={[{ required: true, message: 'Missing check condition' }]}\n                                        >\n                                            <Input placeholder=\"Check Condition\" />\n                                        </Form.Item>\n                                    </Space>\n                                ))}\n                                <Form.Item>\n                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\n                                        Add Check Condition\n                                    </Button>\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                    </div>\n                )}\n            </Form.List>\n        )\n    }\n}\n","/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/components/graph/DataFlowEdgeType.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/pages/pipelines/PipelinesPageReduxContainer.js",[],"/Users/eric.lee/Documents/workspace/fluent/fluent-web/src/services/GraphService.js",["147","148","149"],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":15,"column":8,"nodeType":"156","messageId":"157","endLine":15,"endColumn":13},{"ruleId":"150","replacedBy":"158"},{"ruleId":"152","replacedBy":"159"},{"ruleId":"150","replacedBy":"160"},{"ruleId":"152","replacedBy":"161"},{"ruleId":"150","replacedBy":"162"},{"ruleId":"152","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":34,"column":21,"nodeType":"166","messageId":"167","endLine":34,"endColumn":23},{"ruleId":"164","severity":1,"message":"168","line":37,"column":23,"nodeType":"166","messageId":"167","endLine":37,"endColumn":25},{"ruleId":"154","severity":1,"message":"169","line":2,"column":37,"nodeType":"156","messageId":"157","endLine":2,"endColumn":43},{"ruleId":"170","severity":1,"message":"171","line":17,"column":5,"nodeType":"172","messageId":"173","endLine":19,"endColumn":6},{"ruleId":"150","replacedBy":"174"},{"ruleId":"152","replacedBy":"175"},{"ruleId":"170","severity":1,"message":"171","line":17,"column":5,"nodeType":"172","messageId":"173","endLine":19,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":9,"column":5,"nodeType":"172","messageId":"173","endLine":11,"endColumn":6},{"ruleId":"150","replacedBy":"176"},{"ruleId":"152","replacedBy":"177"},{"ruleId":"170","severity":1,"message":"171","line":11,"column":5,"nodeType":"172","messageId":"173","endLine":13,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":30,"column":62,"nodeType":"180","messageId":"181","endLine":30,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":44,"column":62,"nodeType":"180","messageId":"181","endLine":44,"endColumn":64},{"ruleId":"170","severity":1,"message":"171","line":8,"column":5,"nodeType":"172","messageId":"173","endLine":17,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":8,"column":5,"nodeType":"172","messageId":"173","endLine":16,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":11,"column":5,"nodeType":"172","messageId":"173","endLine":21,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":29,"column":5,"nodeType":"172","messageId":"173","endLine":31,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":40,"column":58,"nodeType":"180","messageId":"181","endLine":40,"endColumn":60},{"ruleId":"178","severity":1,"message":"179","line":50,"column":66,"nodeType":"180","messageId":"181","endLine":50,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":7,"column":5,"nodeType":"172","messageId":"173","endLine":9,"endColumn":6},{"ruleId":"164","severity":1,"message":"165","line":36,"column":75,"nodeType":"166","messageId":"167","endLine":36,"endColumn":77},{"ruleId":"178","severity":1,"message":"179","line":36,"column":98,"nodeType":"180","messageId":"181","endLine":36,"endColumn":100},{"ruleId":"170","severity":1,"message":"171","line":118,"column":5,"nodeType":"172","messageId":"173","endLine":120,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":179,"column":5,"nodeType":"172","messageId":"173","endLine":181,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":186,"column":52,"nodeType":"180","messageId":"181","endLine":186,"endColumn":54},{"ruleId":"178","severity":1,"message":"179","line":100,"column":16,"nodeType":"180","messageId":"181","endLine":100,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":111,"column":30,"nodeType":"180","messageId":"181","endLine":111,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":117,"column":16,"nodeType":"180","messageId":"181","endLine":117,"endColumn":18},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar",["182"],["183"],["182"],["183"],["182"],["183"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Select' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["182"],["183"],["182"],["183"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]